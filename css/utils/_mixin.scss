@use "static" as s;
@use "sass:map";

@mixin flexBox(
  $direction: row,
  $justify: flex-start,
  $align: center,
  $wrap: nowrap,
  $content: normal,
  $gap: 0
) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  gap: $gap;
  flex-wrap: $wrap;
  @if ($wrap == wrap) {
    align-content: $align;
  } @else {
    @if ($content != normal) {
      @error 'wrap 속성이 아니면 align-content가 작동하지 않습니다.';
    }
  }
}

@mixin defaultButton(
  $bgColor: white,
  $color: black,
  $border: none,
  $radius: 0,
  $cursor: pointer,
  $font-size: s.$font-size-m
) {
  background-color: $bgColor;
  color: $color;
  border: $border;
  border-radius: $radius;
  cursor: pointer;
  font-size: $font-size;
  &:hover {
    opacity: 60%;
  }
}

@mixin svgColor($color: black) {
  svg {
    fill: $color;
  }
}

@mixin media($name) {
  $breakPoint: (
    sm: 576px,
    md: 768px,
    lg: 992px,
    xl: 1200px,
    xxl: 1400px,
  );

  @media all and (max-width: map.get($breakPoint, $name)) {
    @content;
  }
}

@mixin bgImg($url: null, $size: auto, $repeat: repeat) {
  background-image: url($url);
  background-size: $size;
  background-repeat: $repeat;
  background-position: center center;
}

@mixin lineEllipsis($line: 1) {
  display: -webkit-box;
  -webkit-line-clamp: $line;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
}

@mixin autoGridBox(
  $columns: null,
  $rows: null,
  $justify: flex-start,
  $align: stretch,
  $align-items: normal,
  $justify-items: normal,
  $gap: 0
) {
  display: grid;
  grid-template-columns: repeat(auto-fill, $columns);
  grid-template-rows: repeat(auto-fill, $rows);
  justify-content: $justify;
  align-content: $align;
  align-items: $align-items;
  justify-items: $justify-items;
  gap: $gap;
}
